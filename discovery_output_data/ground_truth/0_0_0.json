{"epoch": 0, "jobid": 0, "configindex": 0, "payload": ["---- MODULE two_phase_commit ----\n\\* benchmark: i4-two-phase-commit\n\nEXTENDS TLC\n\nCONSTANT Node\n\nVARIABLE vote_yes\nVARIABLE vote_no\nVARIABLE alive\nVARIABLE go_commit\nVARIABLE go_abort\nVARIABLE decide_commit\nVARIABLE decide_abort\n\nVARIABLE abort_flag\n\n\\* This variable added to prevent cheesing\nVARIABLE compatible\n\nvars == <<vote_yes,vote_no,alive,go_commit,go_abort,decide_commit,decide_abort,abort_flag,compatible>>\n\n\nVote1(n) ==\n    /\\ n \\in compatible \\* gt: n \\in compatible\n    /\\ n \\in alive \\* gt: n \\in alive\n    /\\ vote_yes' = vote_yes \\cup {n} \\* gt: vote_yes \\cup {n}\n    /\\ vote_no' = vote_no \\* gt: vote_no\n    /\\ decide_commit' = decide_commit \\* gt: decide_commit\n    /\\ decide_abort' = decide_abort \\* gt: decide_abort\n    /\\ UNCHANGED <<alive,go_commit,go_abort,abort_flag,compatible>>\n\n\nVote2(n) ==\n    /\\ n \\notin compatible \\* gt: n \\notin compatible\n    /\\ n \\in alive \\* gt: n \\in alive\n    /\\ vote_no' = vote_no \\cup {n} \\* gt: vote_no \\cup {n}\n    /\\ vote_yes' = vote_yes \\* gt: vote_yes\n    /\\ decide_commit' = decide_commit \\* gt: decide_commit\n    /\\ decide_abort' = decide_abort \\* gt: decide_abort\n    /\\ UNCHANGED <<alive,go_commit,go_abort,abort_flag,compatible>>\n\n\nGo1 ==\n    /\\ Node \\cap go_abort = {} \\* gt: Node \\cap go_abort = {}\n    /\\ vote_yes = Node \\* gt: vote_yes = Node\n    /\\ go_commit' = Node \\* gt: Node\n    /\\ go_abort' = go_abort \\* gt: go_abort\n    /\\ abort_flag' = abort_flag \\* gt: abort_flag\n    /\\ UNCHANGED <<vote_yes,vote_no,alive,decide_commit,decide_abort,compatible>>\n\n\nGo2 ==\n    /\\ Node \\cap go_commit = {} \\* gt: Node \\cap go_commit = {}\n    /\\ (Node \\cap vote_no) \\cup (Node \\ alive) # {} \\* gt: (Node \\cap vote_no) \\cup (Node \\ alive) # {}\n    /\\ go_abort' = Node \\* gt: Node\n    /\\ abort_flag' = TRUE \\* gt: TRUE\n    /\\ go_commit' = go_commit \\* gt: go_commit\n    /\\ UNCHANGED <<vote_yes,vote_no,alive,decide_commit,decide_abort,compatible>>\n\n\nCommit(n) ==\n    /\\ n \\in alive \\* gt: n \\in alive\n    /\\ n \\in go_commit \\* gt: n \\in go_commit\n    /\\ decide_commit' = decide_commit \\cup {n} \\* gt: decide_commit \\cup {n}\n    /\\ vote_no' = vote_no \\* gt: vote_no\n    /\\ vote_yes' = vote_yes \\* gt: vote_yes\n    /\\ decide_abort' = decide_abort \\* gt: decide_abort\n    /\\ UNCHANGED <<alive,go_commit,go_abort,compatible,abort_flag>>\n\n\nAbort(n) ==\n    /\\ n \\in alive \\* gt: n \\in alive\n    /\\ n \\in go_abort \\* gt: n \\in go_abort\n    /\\ decide_abort' = decide_abort \\cup {n} \\* gt: decide_abort \\cup {n}\n    /\\ vote_no' = vote_no \\* gt: vote_no\n    /\\ vote_yes' = vote_yes \\* gt: vote_yes\n    /\\ decide_commit' = decide_commit \\* gt: decide_commit\n    /\\ UNCHANGED <<alive,go_commit,go_abort,compatible,abort_flag>>\n\n\n\nFail(n) ==\n    /\\ n \\in alive\n    /\\ alive' = alive \\ {n}\n    \\* omitted: /\\ abort_flag' = TRUE\n    /\\ UNCHANGED <<vote_yes,vote_no,go_commit,go_abort,decide_commit,decide_abort,compatible, abort_flag>>\n\ntermination == \n    \\/ alive \\in SUBSET decide_abort \n    \\/ alive \\in SUBSET decide_commit\n\nTermination == termination /\\ UNCHANGED vars\n\nOpNext ==\n    \\/ \\E n \\in Node : Vote1(n)\n    \\/ \\E n \\in Node : Vote2(n)\n    \\/ Go1\n    \\/ Go2\n    \\/ \\E n \\in Node : Commit(n)\n    \\/ \\E n \\in Node : Abort(n)\n\nOtherNext ==\n    \\/ Termination\n    \\/ \\E n \\in Node : Fail(n)\n\nNext == OpNext \\/ OtherNext\n\nInit ==\n    /\\ compatible \\in SUBSET Node \n    /\\ vote_yes = {}\n    /\\ vote_no = {}\n    /\\ alive = Node\n    /\\ go_commit = {}\n    /\\ go_abort = {}\n    /\\ decide_commit = {}\n    /\\ decide_abort = {}\n    /\\ abort_flag = FALSE\n\nSpec == Init /\\ [][Next]_vars /\\ SF_vars(OpNext)\n\nSafety ==\n    /\\ \\A n,n2 \\in Node : (n \\in decide_commit) => (n2 \\notin decide_abort)\n    \\* The line below changes vote_yes -> compatible \n    /\\ \\A n,n2 \\in Node : (n \\in decide_commit) => (n2 \\in compatible)\n    /\\ \\A n,n2 \\in Node : (n \\in decide_abort) => abort_flag\n    \\* This safety property did not exist in the original benchmark\n    /\\ \\A n \\in Node : (n \\in compatible) => (n \\notin vote_no)\n\nTemporal == \n    /\\ <> termination\n    /\\ ([] (compatible = Node /\\ alive = Node)) => (<> (decide_commit = Node))\n    \\* If the node is not alive, its state should not change\n    /\\ [][\\A n \\in Node : n \\notin alive => \n        /\\ (n \\in decide_commit <=> n \\in decide_commit')\n        /\\ (n \\in decide_abort <=> n \\in decide_abort')\n        /\\ (n \\in vote_yes <=> n \\in vote_yes')\n        /\\ (n \\in vote_no <=> n \\in vote_no')\n        ]_vars\n\n====", {"__Go1_go_abort__": "go_abort"}]}